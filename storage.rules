rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // 헬퍼 함수들
    // ========================================
    
    // 관리자 확인 함수
    function isAdmin() {
      return request.auth != null && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         request.auth.token.email == 'mistarcodm@gmail.com');
    }
    
    // 자신의 문서인지 확인하는 함수
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // 인증된 사용자인지 확인
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 문서 작성자인지 확인
    function isAuthor() {
      return request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // 문제를 해결한 사용자인지 확인
    function hasSolvedChallenge(challengeId) {
      return request.auth != null && 
        exists(/databases/$(database)/documents/wargame_solve_logs/$(request.auth.uid + '_' + challengeId));
    }
    
    // ========================================
    // 사용자 관련 규칙
    // ========================================
    
    // 사용자 문서
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) || isAdmin();
      allow update: if isOwner(userId) || isAdmin() || 
        (isAuthenticated() && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['points', 'wargamePoints', 'wargameScore', 'solvedChallenges', 'solvedWargameProblems', 'ctfPoints', 'lastActivity', 'lastLogin', 'seasonRank', 'lastSeasonReset', 'photoURL', 'affiliation', 'username', 'displayName', 'title', 'level', 'achievements', 'tier']));
      allow delete: if isAdmin();
      
      // 사용자별 솔브 로그
      match /solved_challenges/{challengeId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId) || isAdmin();
      }
    }
    
    // 사용자별 문제 해결 로그 - 개별 문서 규칙
    match /user_solve_logs/{logId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin() || (isAuthenticated() && request.auth.uid == resource.data.userId);
    }
    
    // ========================================
    // 워게임 관련 규칙
    // ========================================
    
    // 워게임 문제
    match /wargame_challenges/{challengeId} {
      allow read: if true;
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || 
        (isAuthenticated() && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['solvedCount', 'solvedBy', 'lastSolved', 'level', 'points'])); // level과 points 필드 업데이트 허용
    }
    
    // 워게임 해결 로그
    match /wargame_solve_logs/{logId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }
    
    // 워게임 풀이 (WriteUps)
    match /wargame_writeups/{writeupId} {
      allow read: if true; // 모든 사용자가 풀이를 읽을 수 있음
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId && 
        hasSolvedChallenge(request.resource.data.challengeId); // 문제를 해결한 사용자만 풀이 작성 가능
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin()) &&
        // 좋아요/싫어요/북마크/댓글만 업데이트 허용
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['likes', 'dislikes', 'bookmarks', 'comments', 'updatedAt']);
      allow delete: if isAdmin() || 
        (isAuthenticated() && request.auth.uid == resource.data.userId);
    }
    
    // 워게임 난이도 투표
    match /wargame_difficulty_votes/{voteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        hasSolvedChallenge(request.resource.data.challengeId); // 문제를 해결한 사용자만 난이도 투표 가능
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        hasSolvedChallenge(resource.data.challengeId); // 자신의 투표만 수정 가능
      allow delete: if isAdmin();
    }
    
    // 활성 사용자 컬렉션
    match /active_users/{userId} {
      allow read: if true;
      allow write: if isAuthenticated();
    }
    
    // ========================================
    // CTF 관련 규칙
    // ========================================
    
    // CTF 대회
    match /ctf_contests/{contestId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || 
        (isAuthenticated() && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['participants', 'authorizedUsers', 'participantCount']));
      
      // CTF 문제 (중첩 컬렉션)
      match /problems/{problemId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
      }
    }
    
    // CTF 문제 (단일 컬렉션)
    match /ctf_problems/{problemId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || 
        (isAuthenticated() && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['solvedCount', 'solvedBy', 'lastSolved']));
    }
    
    // CTF 참가자
    match /ctf_participants/{participantId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                     request.resource.data.uid == request.auth.uid;
      allow update: if isAdmin() || 
        (isAuthenticated() && request.auth.uid == resource.data.uid);
      allow delete: if isAdmin() || 
        (isAuthenticated() && request.auth.uid == resource.data.uid);
    }
    
    // CTF 해결 로그
    match /ctf_solve_logs/{logId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }
    
    // CTF 예약
    match /ctf_reservations/{reservationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                     request.resource.data.creatorId == request.auth.uid;
      allow update, delete: if isAdmin() || 
        (isAuthenticated() && request.auth.uid == resource.data.creatorId);
    }
    
    // ========================================
    // 커뮤니티 관련 규칙
    // ========================================
    
    // 커뮤니티 게시글
    match /community_posts/{postId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.authorId || isAdmin());
      allow delete: if isAdmin() || 
        (isAuthenticated() && request.auth.uid == resource.data.authorId);
          allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewCount', 'likes', 'likedBy', 'dislikes', 'dislikedBy', 'commentCount']);
    }
    
    // 커뮤니티 댓글 (별도 컬렉션)
    match /community_comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.authorId;
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.authorId || isAdmin());
    }
    
    // 승인 대기 댓글
    match /pending_comments/{commentId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if isAdmin();
    }
    
    // ========================================
    // 플래그 제출 관련 규칙
    // ========================================
    
    // 플래그 제출 로그
    match /flag_submissions/{submissionId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // 공개 제출 기록
    match /public_submissions/{submissionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // ========================================
    // 관리 관련 규칙
    // ========================================
    
    // 배너 관리
    match /banners/{bannerId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // 커리큘럼
    match /curriculum/{curriculumId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
      
      // 커리큘럼 단계
      match /steps/{stepId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
      }
    }
    
    // 시즌 관리
    match /seasons/{seasonId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // 시즌 참가자
    match /season_participants/{participantId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isOwner(request.resource.data.userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // 시즌 점수 기록
    match /season_score_history/{historyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // 점수 관리
    match /scores/{scoreId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // 알림
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if isAdmin() || isAuthenticated();
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow delete: if isAdmin();
    }
    
    // 알림 설정
    match /notification_settings/{userId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
    }
    
    // 사용자 활동 로그
    match /activity_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // 제재 관리
    match /sanctions/{sanctionId} {
      allow read: if isAdmin() || 
        (isAuthenticated() && request.auth.uid == resource.data.userId);
      allow write: if isAdmin();
    }
    
    // 사용자 제재 정보
    match /user_sanctions/{sanctionId} {
      allow read: if isAdmin() || 
        (isAuthenticated() && request.auth.uid == resource.data.userId);
      allow write: if isAdmin();
    }
    
    // 프로필 배너
    match /profile_banners/{bannerId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // 업적 시스템
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // 사용자 업적
    match /user_achievements/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // 레벨 시스템
    match /user_levels/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // 경험치 로그
    match /exp_logs/{logId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }
    
    // ========================================
    // 기본 규칙 (최하위 우선순위)
    // ========================================
    
    // 기타 모든 문서에 대한 기본 규칙
    match /{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}
